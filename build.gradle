buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven { url 'http://repo.spring.io/plugins-release' }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:1.4.0.RELEASE"
        classpath 'org.hidetake:gradle-ssh-plugin:1.1.3'
    }

}

plugins {
    id 'net.saliman.properties' version '1.4.6'
}

apply plugin: 'org.hidetake.ssh'

//*************************************************************************
// IDEA
//*************************************************************************

apply plugin: 'idea'

idea {
    module {
        inheritOutputDirs = true
        downloadSources = true
    }
}

//*************************************************************************
// Sub Project Config
//*************************************************************************

subprojects {
    repositories {
        jcenter()
        mavenCentral()
        maven { url "https://jitpack.io" }
        maven { url 'https://artifacts.alfresco.com/nexus/content/repositories/public' }
    }

//    ext {
//        junitVersion = "4.11"
//        springVersion = "4.3.3.RELEASE"
//        jacksonVersion = "2.4.4"
//        compileJava.options.encoding = 'UTF-8'
//        compileTestJava.options.encoding = 'UTF-8'
//    }

    apply plugin: 'java'
    apply plugin: 'application'
    apply plugin: 'spring-boot'
    apply plugin: 'net.saliman.properties'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    tasks.withType(AbstractCompile) {
        options.encoding = 'UTF-8'
    }
    tasks.withType(Javadoc) {
        options.encoding = 'UTF-8'
    }

    jar {
        manifest.attributes provider: 'gradle'
        exclude("db_testdata")
    }

    test {
        testLogging.showStandardStreams = true
    }

    bootRun {
        jvmArgs = ["-Dfile.encoding=UTF-8", "-Dserver.port=8080"]
    }

    bootRepackage {
        excludeDevtools = true
    }

//*************************************************************************
// Resource Processing
//*************************************************************************

    task loadEnvResources << {
        def envResDir = file("src/main/environment/$environmentName")
        if (!envResDir.exists()) println "!!!!!!Environment: $environmentName is not existed in $project.name!!!!!!"
        else {
            println "!!!!!!Target environment: $environmentName for $project.name!!!!!!"

            copy {
                from envResDir
                into "$buildDir/resources/main"
                include '**/*'
            }
        }
    }

    processResources.duplicatesStrategy = DuplicatesStrategy.WARN
    processResources << {
        loadEnvResources.execute()
    }

//*************************************************************************
// Deployment
//*************************************************************************

    task deployToServer(dependsOn: jar) << {
        println "!!!!!!Deploy $jar.archiveName to $startScriptPath!!!!!!"

        ssh.run {
            session(remotes.role(deploySvrRole)) {
                if (project.hasProperty("run_me_before_deploy") && run_me_before_deploy?.trim()) {
                    execute("$run_me_before_deploy", ignoreError: true)
                }
                // upload svr jar
                put(jar.archivePath.absolutePath, jar.archiveName)
                execute("mv $jar.archiveName $deployPath/lib/")
                // upload shared jar
                put(project(':module_shared').jar.archivePath.absolutePath,
                        project(':module_shared').jar.archiveName)
                execute("mv "+project(':module_shared').jar.archiveName+" $deployPath/lib/")
                execute("$startScriptPath restart", ignoreError: true)
            }
        }
    }

    task deployAllToServer(dependsOn: distZip) << {
        ext.unzipName = distZip.archiveName.substring(0, distZip.archiveName.length() - 4)
        println "!!!!!!Deploy $unzipName to $startScriptPath!!!!!!"

        ssh.run {
            session(remotes.role(deploySvrRole)) {
                execute("$startScriptPath stop", ignoreError: true)
                put(distZip.archivePath.absolutePath, distZip.archiveName)
                execute("mkdirs $deploy_home", ignoreError: true)
                execute('unzip -o ' + distZip.archiveName + ' -d ' + deploy_home)
                execute("rm -f $deployPath")
                execute("ln -sf $deploy_home$unzipName $deployPath")
                execute("rm $deployPath/lib/spring-boot-devtools*.jar") // exclude is not work
                execute("sed -i 's/svrStatusPort=.*/svrStatusPort=$httpPort/' $startScriptPath")
                execute("$startScriptPath restart", ignoreError: true)
            }
        }
    }

//*************************************************************************
// JVM Startup Arguments
//*************************************************************************

    startScripts.defaultJvmOpts.add("-XX:NewSize=192m")
    startScripts.defaultJvmOpts.add("-XX:+UseParallelOldGC")
    startScripts.defaultJvmOpts.add("-XX:+UseAdaptiveSizePolicy")
    startScripts.defaultJvmOpts.add("-XX:MaxGCPauseMillis=1000")
    startScripts.defaultJvmOpts.add("-Dfile.encoding=UTF-8")
    startScripts.defaultJvmOpts.add("-Djava.security.egd=file:/dev/./urandom")
    if (project.hasProperty("jmx_host")) {
        startScripts.defaultJvmOpts.add("-Dcom.sun.management.jmxremote")
//        startScripts.defaultJvmOpts.add("-Dcom.sun.management.jmxremote.rmi.port=7901")
        startScripts.defaultJvmOpts.add("-Dcom.sun.management.jmxremote.authenticate=false")
        startScripts.defaultJvmOpts.add("-Dcom.sun.management.jmxremote.ssl=false")
        startScripts.defaultJvmOpts.add("-Dcom.sun.management.jmxremote.local.only=false")
        startScripts.defaultJvmOpts.add("-Djava.rmi.server.hostname=$jmx_host")
    }

    applicationDistribution.exclude('**/spring-boot-devtools*.jar')

}