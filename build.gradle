buildscript {
    repositories {
        jcenter()
        gradlePluginPortal()
        maven { url 'http://maven.aliyun.com/nexus/content/groups/public/'}
        mavenCentral()
        maven { url 'http://repo.spring.io/plugins-release' }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin"//2.2.0.RELEASE
        classpath 'org.hidetake:gradle-ssh-plugin:2.10.1'//2.10.0
    }
}

plugins {
    id 'org.springframework.boot' version '2.1.6.RELEASE'
    id 'net.saliman.properties' version '1.4.6'
//    id "org.hidetake.ssh" version "2.10.0"
    id 'java'
}

apply plugin: 'org.hidetake.ssh'

//*************************************************************************
// IDEA
//*************************************************************************

apply plugin: 'idea'

idea {
    module {
        inheritOutputDirs = true
        downloadSources = true
    }
}

//*************************************************************************
// Sub Project Config
//*************************************************************************
subprojects {
    repositories {
        jcenter()
        mavenCentral()
        maven { url "https://jitpack.io" }
        maven { url 'https://artifacts.alfresco.com/nexus/content/repositories/public' }
    }

    group = 'smart'
    apply plugin: 'java'
    apply plugin: 'application'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
//    apply plugin: 'maven'
//    apply plugin: 'spring-boot'
//    apply plugin: 'net.saliman.properties'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    mainClassName = 'smart.client.ClientApplication'
    buildDir=new File(rootProject.getBuildDir().getAbsolutePath())
    
    tasks.withType(AbstractCompile) {
        options.encoding = 'UTF-8'
    }
    tasks.withType(Javadoc) {
        options.encoding = 'UTF-8'
    }

    jar {
        manifest.attributes provider: 'gradle'
//        exclude("db_testdata")
    }

    test {
        testLogging.showStandardStreams = true
    }

    bootRun {
        jvmArgs = ["-Dfile.encoding=UTF-8", "-Dserver.port=8080"]
    }

//    bootRepackage {
//        excludeDevtools = true
//    }

//*************************************************************************
// Resource Processing
//*************************************************************************

//    task loadEnvResources << {
//        def envResDir = file("src/main/environment/$environmentName")
//        if (!envResDir.exists()) println "!!!!!!Environment: $environmentName is not existed in $project.name!!!!!!"
//        else {
//            println "!!!!!!Target environment: $environmentName for $project.name!!!!!! to $buildDir/resources/main"
//
//            copy {
//                from envResDir
//                into "$buildDir/resources/main"
//                include '**/*'
//            }
//        }
//    }

//    processResources.duplicatesStrategy = DuplicatesStrategy.WARN
//    processResources << {
//        loadEnvResources.execute()
//    }

//*************************************************************************
// JVM Startup Arguments
//*************************************************************************

    startScripts.defaultJvmOpts.add("-XX:NewSize=192m")
    startScripts.defaultJvmOpts.add("-XX:+UseParallelOldGC")
    startScripts.defaultJvmOpts.add("-XX:+UseAdaptiveSizePolicy")
    startScripts.defaultJvmOpts.add("-XX:MaxGCPauseMillis=1000")
    startScripts.defaultJvmOpts.add("-Dfile.encoding=UTF-8")
    startScripts.defaultJvmOpts.add("-Djava.security.egd=file:/dev/./urandom")
    if (project.hasProperty("jmx_host")) {
        startScripts.defaultJvmOpts.add("-Dcom.sun.management.jmxremote")
//        startScripts.defaultJvmOpts.add("-Dcom.sun.management.jmxremote.rmi.port=7901")
        startScripts.defaultJvmOpts.add("-Dcom.sun.management.jmxremote.authenticate=false")
        startScripts.defaultJvmOpts.add("-Dcom.sun.management.jmxremote.ssl=false")
        startScripts.defaultJvmOpts.add("-Dcom.sun.management.jmxremote.local.only=false")
        startScripts.defaultJvmOpts.add("-Djava.rmi.server.hostname=$jmx_host")
    }

    applicationDistribution.exclude('**/spring-boot-devtools*.jar')

}